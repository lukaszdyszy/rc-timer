{"version":3,"sources":["components/parseTime.js","components/timer/timer.js","components/header/header.js","components/scrambler/scrambler.js","components/results/results.js","components/average.js","components/mean.js","components/tools/tools.js","App.js","serviceWorker.js","index.js"],"names":["parseTime","time","min","Math","floor","sec","ms","timerStatus","beginTime","Timer","props","useState","setTime","className","type","id","onKeyDown","e","keyCode","addTime","onKeyUp","Date","now","runTime","setTimeout","htmlFor","Header","target","href","size","Scrambler","cube","layers","moves","opposites","locked","scramble","i","rnd","random","length","layer","includes","Results","markAll","setMarkAll","useEffect","newSolves","solves","map","solve","marked","updateSolves","checked","onChange","index","key","mark","onClick","splice","dropSolve","sol","prompt","solution","showSolution","penalty","dnf","result","average","dnfs","indexOf","sort","a","b","push","sum","mean","Tools","avgOf","nr","times","name","value","sessAvg","sessMean","window","confirm","toExport","plus","row","toDown","document","createElement","encodeURI","download","click","App","generateScramble","cubeType","setCubeType","this","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.adebf236.chunk.js","sourcesContent":["const parseTime = (time) => {\n    if(typeof(time) != 'number'){\n        return time;\n    } else {\n        let min = Math.floor(time / 60000);\n        let sec = Math.floor((time - min*60000) / 1000);\n        let ms  = Math.floor((time - min*60000 - sec*1000) / 10);\n\n\n        if(min < 1){min = '';}else{min = min+':';}\n        if(sec < 10){sec='0'+sec;}sec=sec+':';\n        if(ms < 10){ms='0'+ms;}\n\n        return min + sec + ms;\n    }\n}\n\nexport default parseTime;","import React, { useState, useEffect } from 'react';\nimport './timer.css';\nimport parseTime from '../parseTime.js';\n\nlet timerStatus = 'neutral';\nlet beginTime = 0;\nconst Timer = (props) => {\n    let [time, setTime] = useState(0);\n\n    const runTime = () => {\n        if(timerStatus == 'running'){\n            setTime(Date.now()-beginTime);\n            setTimeout(runTime, 10);\n        }\n    }\n\n    const spaceDown = (e) => {\n        if(e.keyCode == 32){\n            if(timerStatus == 'neutral'){\n                timerStatus = 'ready';\n                setTime(0);\n            } else if(timerStatus == 'running'){\n                timerStatus = 'stopped';\n                props.addTime(time);\n            }\n        }\n    }\n\n    const spaceUp = (e) => {\n        if(e.keyCode == 32){\n            if(timerStatus == 'ready'){\n                beginTime = Date.now();\n                timerStatus = 'running';\n                runTime();\n            } else if(timerStatus == 'stopped'){\n                timerStatus = 'neutral';\n            }\n        }\n    }\n\n    return (\n        <div className=\"timer-container\">\n            <input type=\"text\" id=\"time\" onKeyDown={spaceDown} onKeyUp={spaceUp}/>\n            <label htmlFor=\"time\" id=\"time-label\">{ parseTime(time) }</label>\n        </div>\n    )\n}\n\nexport default Timer;","import React from 'react';\nimport './header.css';\nimport { FaGithub } from 'react-icons/fa';\n\nconst Header = () => {\n    return (\n        <div className=\"header-container\">\n            <div className=\"menu\"></div>\n            <div className=\"copyright\">\n                <span className=\"copy\">&copy; Łukasz Dyszy </span>\n                <a className=\"gh\" target=\"blank\" href=\"https://github.com/lukaszdyszy/rc-timer\"><FaGithub size={28}/></a>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","const Scrambler = (cube) => {\n    let scramble = '';\n\n    let layers;\n    let moves;\n    let opposites;\n    let locked;\n\n    switch(cube)\n    {\n        case '3x3x3': {\n            moves = 25;\n            layers = ['R', 'L', 'U', 'D', 'F', 'B'];\n            opposites = {\n                'R': ['L'],\n                'L': ['R'],\n                'U': ['D'],\n                'D': ['U'],\n                'F': ['B'],\n                'B': ['F']\n            }\n            locked = {\n                'R': false,\n                'L': false,\n                'U': false,\n                'D': false,\n                'F': false,\n                'B': false\n            }\n        }\n        break;\n        case '4x4x4':\n        case '5x5x5': {\n            moves = 40;\n            if(cube == '5x5x5'){moves = 60;}\n            layers = ['R', 'L', 'U', 'D', 'F', 'B', 'Rw', 'Lw', 'Uw', 'Dw', 'Fw', 'Bw'];\n            opposites = {\n                'R': ['L', 'Lw', 'Rw'],\n                'Rw': ['L', 'Lw', 'R'],\n                'L': ['R', 'Rw', 'Lw'],\n                'Lw': ['R', 'Rw', 'L'],\n                'U': ['D', 'Dw', 'Uw'],\n                'Uw': ['D', 'Dw', 'U'],\n                'D': ['U', 'Uw', 'Dw'],\n                'Dw': ['U', 'Uw', 'D'],\n                'F': ['B', 'Bw', 'Fw'],\n                'Fw': ['B', 'Bw', 'F'],\n                'B': ['F', 'Fw', 'Bw'],\n                'Bw': ['F', 'Fw', 'B']\n            }\n            locked = {\n                'R': false,\n                'L': false,\n                'U': false,\n                'D': false,\n                'F': false,\n                'B': false,\n                'Rw': false,\n                'Lw': false,\n                'Uw': false,\n                'Dw': false,\n                'Fw': false,\n                'Bw': false\n            }\n        }\n    }\n\n    for(let i=0; i<moves; i++)\n    {\n        let rnd;\n        do {\n            rnd = layers[Math.floor(Math.random()*layers.length)];\n        } while (locked[rnd] == true);\n\n        for (let layer in locked) {\n            if(!opposites[layer].includes(rnd)){locked[layer] = false;}\n        }\n        locked[rnd] = true;\n\n        let mode = Math.floor(Math.random()*3);\n        switch(mode){\n            case 1: rnd+='\\''; break;\n            case 2: rnd+='2'; break;\n        }\n\n        scramble += rnd+' ';\n    }\n\n    return scramble;\n}\n\nexport default Scrambler;","import React, {useState, useEffect} from 'react';\nimport './results.css';\nimport parseTime from '../parseTime.js';\n\nconst Results = (props) => {\n    const dropSolve = (id) => {\n        let newSolves = [...props.solves];\n        newSolves.splice(id, 1);\n        props.updateSolves(newSolves);\n    }\n\n    const penalty = (id) => {\n        let newSolves = [...props.solves];\n        newSolves[id].penalty = !newSolves[id].penalty;\n        props.updateSolves(newSolves);\n    }\n\n    const dnf = (id) => {\n        let newSolves = [...props.solves];\n        newSolves[id].dnf = !newSolves[id].dnf;\n        props.updateSolves(newSolves);\n    }\n\n    const mark = (id) => {\n        let newSolves = [...props.solves];\n        newSolves[id].marked = !newSolves[id].marked;\n        props.updateSolves(newSolves);\n    }\n\n    const solution = (id) => {\n        let newSolves = [...props.solves];\n        let sol = prompt('Enter solution: ', newSolves[id].solution);\n        if(sol != null){\n            newSolves[id].solution = sol;\n            props.updateSolves(newSolves);\n        }\n    }\n\n    const showSolution = (id) => {\n        if(props.solves[id].solution.length > 0){\n            return 'solution: '+props.solves[id].solution;\n        }\n    }\n\n    let [markAll, setMarkAll] = useState(true);\n    useEffect(() => {\n        let newSolves = [...props.solves];\n        newSolves.map((solve) => {\n            solve.marked = markAll;\n        });\n        props.updateSolves(newSolves);\n    }, [markAll])\n\n    return (\n        <div className=\"results-container\">\n            <table className=\"results-table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Lp <input type=\"checkbox\" \n                            checked={markAll} \n                            onChange={()=>{setMarkAll(!markAll)}}/>\n                        </th>\n                        <th>scramble</th>\n                        <th>time</th>\n                        <th>+2</th>\n                        <th>DNF</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        props.solves.map((solve, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>\n                                        {index+1}\n                                        <input type=\"checkbox\" \n                                        checked={solve.marked}\n                                        onChange={() => {mark(index)}}/>\n                                        <button onClick={() => {dropSolve(index)}}>Drop</button>\n                                    </td>\n                                    <td>\n                                        {solve.scramble}<button onClick={() => {solution(index)}}>add/edit solution</button><br/>\n                                        {showSolution(index)}\n                                    </td>\n                                    <td>{parseTime(solve.time)}</td>\n                                    <td>\n                                        <input type=\"checkbox\" \n                                        checked={solve.penalty}\n                                        onChange={() => {penalty(index)}}/>\n                                    </td>\n                                    <td>\n                                        <input type=\"checkbox\" \n                                        checked={solve.dnf}\n                                        onChange={() => {dnf(index)}}/>\n                                    </td>\n                                    <td>{parseTime(solve.result())}</td>\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Results;","const average = (solves) => {\n    if(solves.length >= 3){\n        let dnfs = 0;\n        do{\n            if(solves.indexOf('DNF')!=-1){\n                dnfs++;\n                solves.splice(solves.indexOf('DNF'), 1);\n            }\n        }while(solves.indexOf('DNF')!=-1);\n        if(dnfs >= 2){\n            return 'DNF';\n        } else {\n            solves.sort((a, b) => a-b);\n            if(dnfs==1){\n                solves.push('dnf');\n            }\n            let sum = 0;\n            for(let i=1; i<solves.length-1; i++){\n                sum += Math.floor(solves[i]/10)*10;\n            }\n            return sum/(solves.length-2);\n        }\n    } else {\n        return 0;\n    }\n}\n\nexport default average;","const mean = (solves) => {\n    if(solves.length >= 1){\n        if(solves.indexOf('DNF') != -1){\n            return 'DNF';\n        } else {\n            solves.sort((a, b) => a-b);\n            let sum = 0;\n            for(let i=0; i<solves.length; i++){\n                sum += Math.floor(solves[i]/10)*10;\n            }\n            return sum/(solves.length);\n        }\n    } else {\n        return 0;\n    }\n}\n\nexport default mean;","import React from 'react';\nimport './tools.css';\nimport average from '../average.js';\nimport mean from '../mean.js';\nimport parseTime from '../parseTime.js';\n\nconst Tools = (props) => {\n    const cubeSelect = (e) => {\n        props.cube(e.target.value);\n    }\n\n    const clearSession = () => {\n        if(window.confirm('Are you sure?')){\n            props.updateSolves([]);\n        }\n    }\n\n    const sessAvg = () => {\n        let times = props.solves.map((solve) => solve.result());\n        return average(times);\n    }\n\n    const sessMean = () => {\n        let times = props.solves.map((solve) => solve.result());\n        return mean(times);\n    }\n\n    const avgOf = (nr) => {\n        if(props.solves.length >= nr){\n            let times = props.solves.map((solve) => solve.result());\n            times.splice(0, times.length-nr);\n            return average(times);\n        } else {\n            return 0;\n        }\n    }\n\n    const csvExport = () => {\n        let toExport = 'Lp.,Scramble,Solution,Time,Result\\n';\n        let marked = props.solves.map((solve, index) => {\n            if(solve.marked){\n                let plus = ' ';\n                if(!solve.dnf && solve.penalty){plus='(+2)';}\n\n                let row = (index+1)+','+solve.scramble+','+solve.solution+','+parseTime(solve.time)+plus+','+parseTime(solve.result())+'\\n';\n                toExport += row;\n\n                return solve.result();\n            }\n        });\n        toExport += ',,,Average: ,'+parseTime(average(marked))+'\\n';\n        let toDown = document.createElement('a');\n        toDown.href = 'data:text/csv;charset=utf-8,' + encodeURI(toExport);\n        toDown.download = 'session.csv';\n        toDown.click();\n    }\n\n    return (\n        <div className=\"tools-container\">\n            <div className=\"tool\">\n                Cube: <select name=\"\" id=\"\" onChange={cubeSelect}>\n                    <option value=\"3x3x3\">3x3x3</option>\n                    <option value=\"4x4x4\">4x4x4</option>\n                    <option value=\"5x5x5\">5x5x5</option>\n                </select>\n            </div>\n            <div className=\"tool\">\n                Session Avg: {parseTime(sessAvg())}\n                <br/>\n                Session Mean: {parseTime(sessMean())}\n            </div>\n            <div className=\"tool\">\n                Current Avg5: {parseTime(avgOf(5))}\n                <br/>\n                Current Avg12: {parseTime(avgOf(12))}\n            </div>\n            <div className=\"tool\">\n                <button className=\"opt-button\" onClick={clearSession}>Clear Session</button>\n                <button className=\"opt-button\" onClick={csvExport}>Export selected to csv</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Tools;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Timer from './components/timer/timer.js';\nimport Header from './components/header/header.js';\nimport Scrambler from './components/scrambler/scrambler.js';\nimport Results from './components/results/results.js';\nimport Tools from './components/tools/tools.js';\n\nfunction App() {\n  const [solves, updateSolves] = useState([]);\n  const [scramble, generateScramble] = useState('');\n  const [cubeType, setCubeType] = useState('3x3x3');\n\n  const addSolve = (time) => {\n    let solve = {\n      marked: true,\n      scramble: scramble,\n      solution: '',\n      time: time,\n      penalty: false,\n      dnf: false,\n      result: function(){\n        if(this.dnf){return 'DNF';}\n        else if(this.penalty){return this.time+2000;}\n        else{return this.time;}\n      }\n    }\n\n    updateSolves([...solves, solve]);\n    generateScramble(Scrambler(cubeType));\n  }\n\n  useEffect(() => {\n    generateScramble(Scrambler(cubeType));\n  }, []);\n  useEffect(() => {\n    generateScramble(Scrambler(cubeType));\n  }, [cubeType]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Header />\n      </header>\n      <main>\n        <div className=\"main-content\">\n          <div className=\"timer\">\n            <Timer addTime={addSolve}/>\n          </div>\n          <div className=\"tools\">\n            <Tools cube={setCubeType} solves={solves} updateSolves={updateSolves}/>\n          </div>\n        </div>\n        <div className=\"scramble\">\n          scramble: { scramble }\n        </div>\n      </main>\n      <section className=\"results-table\">\n        <Results solves={solves} updateSolves={updateSolves}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}